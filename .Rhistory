!is.null(increment_version)
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = package_dir, vignettes = build_vignettes)
package_tarball
package_dir
# Install the package and return the tarball
system(paste("R CMD INSTALL", package_tarball))
?devtools::build
#' Build and install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
build_vignettes = FALSE, increment_version = NULL){
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = package_dir, vignettes = build_vignettes, path = output_directory)
# Install the package and return the tarball
system(paste("R CMD INSTALL", package_tarball))
return(package_tarball)
}
getwd()
build_and_install_package(path = "../testest")
#' Build and install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
build_vignettes = FALSE, increment_version = NULL){
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = package_dir, vignettes = build_vignettes, path = output_directory)
# Install the package and return the tarball
system(paste("R CMD INSTALL", package_tarball))
return(package_tarball)
}
build_and_install_package(path = "../testest")
build_and_install_package(output_directory =  = "../testest")
build_and_install_package(output_directory =  "../testest")
build_and_install_package(output_directory =  "../temp/")
build_and_install_package(output_directory =  "../temp/abc.txt")
dir.exists("../temp/")
dir.exists("../temp/abc.txt")
dir.exists("../temp/packageR_0.0.0.9000.tar.gz")
#' Build and install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
build_vignettes = FALSE, increment_version = NULL){
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = package_dir, vignettes = build_vignettes, path = output_directory)
# Install the package and return the tarball
system(paste("R CMD INSTALL", package_tarball))
return(package_tarball)
}
build_and_install_package(output_directory =  "../temp/abc.txt")
build_and_install_package()
#' Build and install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
build_vignettes = FALSE, increment_version = NULL){
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory) & !dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = package_dir, vignettes = build_vignettes, path = output_directory)
# Install the package and return the tarball
system(paste("R CMD INSTALL", package_tarball))
return(package_tarball)
}
build_and_install_package()
#' Build and install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
build_vignettes = FALSE, increment_version = NULL){
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory)){
!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = package_dir, vignettes = build_vignettes, path = output_directory)
# Install the package and return the tarball
system(paste("R CMD INSTALL", package_tarball))
return(package_tarball)
}
#' Build and install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
build_vignettes = FALSE, increment_version = NULL){
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory)){
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = package_dir, vignettes = build_vignettes, path = output_directory)
# Install the package and return the tarball
system(paste("R CMD INSTALL", package_tarball))
return(package_tarball)
}
build_and_install_package(output_directory =  "../temp/abc.txt")
build_and_install_package()
build_and_install_package(increment_version = "dev")
#' Build vignettes for a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @return Path to the package tarball
#' @export
build_vignettes = function(package_dir = getwd()){devtools::build_vignettes(package_dir)}
x = devtools::build_vignettes()
x
?devtools::build_vignettes()
#' Run examples in a package
#'
#' @param package Path to either a package source direcory or a package tarball. Default is current working directory.
#' @export
run_examples = function(package = getwd()){
devtools::run_examples(package)
}
#' Run R check on a package tarball
#'
#' @param package_tarball Path to a package tarball.
#' @export
r_check = function(package_tarball){
system(paste("R CMD check", package_tarball))
}
#' Run BiocCheck on a package
#'
#' @param package Path to either a package source direcory or a package tarball. Default is current working directory.
#' @export
bioc_check = function(package = getwd()){
BiocCheck::BiocCheck(package = package)
}
#' Run BiocCheckGitClone on a package
#'
#' @param package Path to either a package source direcory or a package tarball. Default is current working directory.
#' @export
bioc_git_check = function(package = getwd()){
BiocCheck::BiocCheckGitClone(package)
}
?BiocCheck::BiocCheckGitClone
?BiocCheck::BiocCheck
getwd()
setwd("R/")
package = getwd()
package
dirname(package)
#' Run examples in a package
#'
#' @param package Path to either a package source directory or a package tarball. Default is current working directory.
#' @export
run_examples = function(package = getwd()){
devtools::run_examples(package)
}
#' Run R check on a package tarball
#'
#' @param package_tarball Path to a package tarball.
#' @return An object of class rcmdcheck.
#' @export
r_check = function(package_tarball){
rcmdcheck::rcmdcheck(package_tarball)
}
#' Run BiocCheck on a package
#'
#' @param package Path to either a package source directory or a package tarball. Default is current working directory.
#' @return An object of class BiocCheck which consists of three lists: error, warning and note.
#' @export
bioc_check = function(package = getwd(), checkDir){
BiocCheck::BiocCheck(package = package)
}
#' Run BiocCheckGitClone on a package
#'
#' @param package Path to a package source directory. Default is current working directory.
#' @return An object of class BiocCheck which consists of three lists: error, warning and note.
#' @export
bioc_git_check = function(package_dir = getwd()){
BiocCheck::BiocCheckGitClone(package_dir)
}
#' Run package checks on a package tarball
#'
#' @param package_dir Path to a package source directory.
#' @param run_examples Logical value indicating whether to run devtools::run_examples(). Default is TRUE.
#' @param r_check Logical value indicating whether to run R CMD check. Default is TRUE.
#' @param bioc_check Logical value indicating whether to run BiocCheck. Default is TRUE.
#' @param bioc_git_check Logical value indicating whether to run BiocCheckGitClone. Default is TRUE.
#' @export
package_check_pipeline = function(package_tarball, run_examples = TRUE, r_check = TRUE,
bioc_check = TRUE, bioc_git_check = TRUE){
# Check that a path to a directory provided to package_dir
if(!dir.exists(package_dir)){"package_dir should be the path to a package source directory"}
# Initialize a list to store results of checks
check_results = list()
# Perform specified checks
if(run_examples){list$run_examples = run_examples(package = package_tarball)}
if(r_check){list$r_check = r_check(package_tarball = package_tarball)}
if(bioc_check){list$bioc_check = bioc_check(package = package_tarball)}
if(bioc_git_check){list$bioc_git_check = bioc_git_check(package = package_tarball)}
# Return list with check results
return(check_results)
}
?rcmdcheck::rcmdcheck
funk = function(x){x+5}
funk(10)
funk = 22
funk(10)
?devtools::run_examples
?BiocCheck::BiocCheckGitClone
getwd()
library(packageR)
?bioc_check
getwd()
cd ./..
setwd("../..")
getwd()
packageR::build_and_install_package("methylTools/")
package_dir = "methylTools/"
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(".")
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory)){
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
output_directory = NULL
if(!is.null(output_directory)){
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
increment_version
!is.null(increment_version)
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = ".", vignettes = build_vignettes, path = output_directory)
#' Build and then optionally install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param install Logical value indicating if package should be installed after it is built. Default is TRUE.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
install = TRUE, build_vignettes = FALSE, increment_version = NULL){
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory)){
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = ".", vignettes = build_vignettes, path = output_directory)
# Install the package if specified and return the tarball
if(install){devtools::install(package_tarball)}
return(package_tarball)
}
#' Build and then optionally install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param install Logical value indicating if package should be installed after it is built. Default is TRUE.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
install = TRUE, build_vignettes = FALSE, increment_version = NULL){
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory)){
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = ".", vignettes = build_vignettes, path = output_directory)
# Install the package if specified and return the tarball
if(install){devtools::install(package_tarball)}
return(package_tarball)
}
getwd()
build_and_install_package(package_dir = "packageR/")
package_dir = "packageR/"
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
current_dir
getwd()
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory)){
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = ".", vignettes = build_vignettes, path = output_directory)
build_vignettes
build_vignettes = FALSE
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = ".", vignettes = build_vignettes, path = output_directory)
# Install the package if specified and return the tarball
if(install){devtools::install(package_tarball)}
install = TRUE
# Install the package if specified and return the tarball
if(install){devtools::install(package_tarball)}
?devtools::instal
?devtools::install
?install_local
#' Build and then optionally install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param install Logical value indicating if package should be installed after it is built. Default is TRUE.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
install = TRUE, build_vignettes = FALSE, increment_version = NULL){
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory)){
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = ".", vignettes = build_vignettes, path = output_directory)
# Install the package if specified and return the tarball
if(install){install.packages(package_tarball, repos = NULL, type="source")}
return(package_tarball)
}
build_and_install_package(package_dir = "packageR/")
getwd()
#' Build and then optionally install a package
#'
#' @param package_dir Path to the package source directory. Default is the current directory.
#' @param output_directory Directory in which to save package tarball. Default is the parent directory of the package source directory.
#' @param install Logical value indicating if package should be installed after it is built. Default is TRUE.
#' @param build_vignettes A logical value indicating whether or not to build PDF vignettes. Default is FALSE.
#' @param increment_version If provided, bumps the package version using usethis::use_version().
#' Should be one of "major", "minor", "patch" or "dev".
#' @return Path to the package tarball
#' @export
build_and_install_package = function(package_dir = getwd(), output_directory = NULL,
install = TRUE, build_vignettes = FALSE, increment_version = NULL){
# Check that package_dir exists
if(!dir.exists(package_dir)){
stop("Path provided to package_dir is not a directory")
}
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory)){
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = ".", vignettes = build_vignettes, path = output_directory)
# Install the package if specified and return the tarball
if(install){install.packages(package_tarball, repos = NULL, type="source")}
return(package_tarball)
}
build_and_install_package(package_dir = "packageR/")
build_and_install_package(package_dir = ".")
library(packageR)
reload_package("packageR")
package = "packageR"
detach(name = paste0("package:", package), unload = T, character.only = T)
library(package, character.only = T)
reload_package("packageR")
#' Reload a package
#'
#' @param package A string giving the name of a package
#' @export
reload_package = function(package){
detach(name = paste0("package:", package), unload = T, character.only = T)
library(package, character.only = T)
}
reload_package("packageR")
getwd()
build_and_install_package(".")
reload_package("packageR")
package_dir = getwd()
increment_version = NULL
output_directory = NULL
build_vignettes = FALSE
install = TRUE
# Check that package_dir exists
if(!dir.exists(package_dir)){
stop("Path provided to package_dir is not a directory")
}
# Save path to current directory and then change into path for package
current_dir = getwd()
on.exit(setwd(current_dir))
setwd(package_dir)
# Check that allowed value provided for increment_version and that output_directory is the path to a directory
match.arg(increment_version, choices = c("major", "minor", "patch", "dev"))
if(!is.null(output_directory)){
if(!dir.exists(output_directory)){stop("output_directory must be the path to a directory")}
}
# If increment_version is TRUE, increment version
if(!is.null(increment_version)){usethis::use_version(which = increment_version)}
# Build the package and save the path to its tarball
package_tarball = devtools::build(pkg = ".", vignettes = build_vignettes, path = output_directory)
package_tarball
getwd()
# Install the package if specified and return the tarball
if(install){install.packages(package_tarball, repos = NULL, type = "source")}
